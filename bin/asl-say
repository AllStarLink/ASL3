#!/usr/bin/bash
#
# Copyright 2024 AllStarLink Inc., Jason McCormick N8EI
#
# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# See https://www.gnu.org/licenses/gpl-3.0.txt

BI_AUDIO="/usr/share/asterisk/sounds/en"
CU_AUDIO="/var/lib/asterisk/sounds/en"

DATE_CMD="date"

function ast_rx_lp(){
	asterisk -rx "rpt localplay ${NODE} $1" 2>&1
}

function build_and_say(){
	TMPAUD=$(mktemp --suffix=.ulaw)
	chmod 644 ${TMPAUD}
	ASTAUD=$(echo ${TMPAUD} | sed -e 's/\.ulaw//g')
	SIA="-t ul -r 8k -c 1"
	for e in $*
	do
		if [ -f "${CU_AUDIO}/${e}.ulaw" ]; then
			F_IN="${F_IN} ${SIA} ${CU_AUDIO}/${e}.ulaw"
			continue
		fi
		if [ -f "${BI_AUDIO}/${e}.ulaw" ]; then
			F_IN="${F_IN} ${SIA} ${BI_AUDIO}/${e}.ulaw"
			continue
		fi
	done
	sox --combine concatenate -c 1 -r 8k \
		${F_IN} -t ul ${TMPAUD}
	ast_rx_lp ${ASTAUD}
	sleep 10
	rm ${TMPAUD}
}

function get_time(){

	# calculate the hour
	HOUR=$($DATE_CMD +%I | sed -e 's/0//g')
	HOUR_FULL="digits/${HOUR}"

	# calculate the minute audio
	MINUTE=$($DATE_CMD +%0M | sed -e s/'^0//')
	if (( ${MINUTE} == 0 )); then
		MINUTE_FULL="digits/oclock"
	elif (( ${MINUTE} < 10 )); then
		MINUTE_FULL="digits/oh digits/${MINUTE}"
	elif (( ${MINUTE} < 20 )); then
		MINUTE_FULL="digits/${MINUTE}"
	else
		A=$(( ${MINUTE} / 10 ))
		B=$(( ${MINUTE} % 10 ))
		if (( $B == 0 )); then
			MINUTE_FULL="digits/${A}0"
		else
			MINUTE_FULL="digits/${A}0 digits/${B}"
		fi
	fi

	# am/pm
	AM_PM=$($DATE_CMD +%P | sed 's/^\([ap]\)\(m\)/\1-\2/')

	# timezone with letters prefix
	TIMEZONE=$($DATE_CMD +%Z | tr '[A-Z]' '[a-z]' | sed 's/./letters\/& /g')

	echo "rpt/thetimeis ${HOUR_FULL} ${MINUTE_FULL} digits/${AM_PM} ${TIMEZONE}"
}

function get_time24(){

	# calculate the hour audio
	HOUR=$($DATE_CMD +%-H)
	if (( ${HOUR} < 20 )); then
		HOUR_FULL="digits/${HOUR} hours"
	else
		A=$(( ${HOUR} / 10 ))
		B=$(( ${HOUR} % 10 ))
		if (( $B == 0 )); then
			HOUR_FULL="digits/${A}0 hours"
		else
			HOUR_FULL="digits/${A}0 digits/${B} hours"
		fi
	fi

	# calculate the minute audio
	MINUTE=$($DATE_CMD +%0M | sed -e s/'^0//')
	if (( ${MINUTE} < 20 )); then
		MINUTE_FULL="digits/${MINUTE} minutes"
	else
		A=$(( ${MINUTE} / 10 ))
		B=$(( ${MINUTE} % 10 ))
		if (( $B == 0 )); then
			MINUTE_FULL="digits/${A}0 minutes"
		else
			MINUTE_FULL="digits/${A}0 digits/${B} minutes"
		fi
	fi

	# timezone with letters prefix
	TIMEZONE=$($DATE_CMD +%Z | tr '[A-Z]' '[a-z]' | sed 's/./letters\/& /g')

	echo "rpt/thetimeis ${HOUR_FULL} ${MINUTE_FULL} ${TIMEZONE}"
}

function get_ip4(){
	IP=$(ip -4 -o a | cut -d ' ' -f 2,7 | cut -d '/' -f 1 |\
		grep -v 127.0. | awk '{print $2}')
	for e in $(echo ${IP} | sed 's/./& /g')
	do
		case $e in
			.)	IP_SAY="${IP_SAY} letters/dot" ;;
			*)	IP_SAY="${IP_SAY} digits/$e" ;;
		esac
	done
	echo "letters/i letters/p ${IP_SAY}"
}

function get_ip6(){
	IP=$(ip -6 addr | grep inet6 | awk -F '[ \t]+|/' '{print $3}' |\
		 grep -v ^::1 | grep -v ^fe80)
	for e in $(echo ${IP} | sed 's/./& /g')
	do
		case $e in
			:)  IP_SAY="${IP_SAY} letters/dot" ;;
			[abcdef])  IP_SAY="${IP_SAY} letters/$e" ;;
			*)  IP_SAY="${IP_SAY} digits/$e" ;;
		esac
	done
	echo "letters/i letters/p digits/6 ${IP_SAY}"
}

function usage(){
	echo "Usage: $0 -n {NODE} -w ( time | time24 | ip4 | ip6 )" 1>&2
	exit 1
}

while getopts "n:w:d:" opt; do
	case ${opt} in
		n)	NODE="${OPTARG}" ;;
		w)	WHAT="${OPTARG}" ;;
		d)	DATE_CMD+=" --date=${OPTARG}" ;;
		*)	usage ;;
	esac
done
shift $((OPTIND-1))

if [ -z "${NODE}" ] || [ ${NODE} -lt 1 ]; then
	echo "-n {NODE} must be a number greater than 0" 1>&2
	exit
fi

case ${WHAT} in
	time)		build_and_say $(get_time) ;;
	time24)		build_and_say $(get_time24) ;;
	ip | ip4) 	build_and_say $(get_ip4) ;;
	ip6)		build_and_say $(get_ip6) ;;
	*) 			usage ;;
esac

exit 0

